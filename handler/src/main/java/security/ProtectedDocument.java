/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package security;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Represents a document, this is effectively a row in relational database terms.  Each field or cell can be
 * marked with a set of security markings.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-13")
public class ProtectedDocument implements org.apache.thrift.TBase<ProtectedDocument, ProtectedDocument._Fields>, java.io.Serializable, Cloneable, Comparable<ProtectedDocument> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProtectedDocument");

  private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField OVERALL_MARKINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("overallMarkings", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProtectedDocumentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProtectedDocumentTupleSchemeFactory());
  }

  public Map<ProtectedKey,ProtectedField> fields; // required
  public SecurityContainer overallMarkings; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELDS((short)1, "fields"),
    OVERALL_MARKINGS((short)2, "overallMarkings");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELDS
          return FIELDS;
        case 2: // OVERALL_MARKINGS
          return OVERALL_MARKINGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProtectedKey.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProtectedField.class))));
    tmpMap.put(_Fields.OVERALL_MARKINGS, new org.apache.thrift.meta_data.FieldMetaData("overallMarkings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SecurityContainer.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProtectedDocument.class, metaDataMap);
  }

  public ProtectedDocument() {
  }

  public ProtectedDocument(
    Map<ProtectedKey,ProtectedField> fields,
    SecurityContainer overallMarkings)
  {
    this();
    this.fields = fields;
    this.overallMarkings = overallMarkings;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProtectedDocument(ProtectedDocument other) {
    if (other.isSetFields()) {
      Map<ProtectedKey,ProtectedField> __this__fields = new HashMap<ProtectedKey,ProtectedField>(other.fields.size());
      for (Map.Entry<ProtectedKey, ProtectedField> other_element : other.fields.entrySet()) {

        ProtectedKey other_element_key = other_element.getKey();
        ProtectedField other_element_value = other_element.getValue();

        ProtectedKey __this__fields_copy_key = new ProtectedKey(other_element_key);

        ProtectedField __this__fields_copy_value = new ProtectedField(other_element_value);

        __this__fields.put(__this__fields_copy_key, __this__fields_copy_value);
      }
      this.fields = __this__fields;
    }
    if (other.isSetOverallMarkings()) {
      this.overallMarkings = new SecurityContainer(other.overallMarkings);
    }
  }

  public ProtectedDocument deepCopy() {
    return new ProtectedDocument(this);
  }

  @Override
  public void clear() {
    this.fields = null;
    this.overallMarkings = null;
  }

  public int getFieldsSize() {
    return (this.fields == null) ? 0 : this.fields.size();
  }

  public void putToFields(ProtectedKey key, ProtectedField val) {
    if (this.fields == null) {
      this.fields = new HashMap<ProtectedKey,ProtectedField>();
    }
    this.fields.put(key, val);
  }

  public Map<ProtectedKey,ProtectedField> getFields() {
    return this.fields;
  }

  public ProtectedDocument setFields(Map<ProtectedKey,ProtectedField> fields) {
    this.fields = fields;
    return this;
  }

  public void unsetFields() {
    this.fields = null;
  }

  /** Returns true if field fields is set (has been assigned a value) and false otherwise */
  public boolean isSetFields() {
    return this.fields != null;
  }

  public void setFieldsIsSet(boolean value) {
    if (!value) {
      this.fields = null;
    }
  }

  public SecurityContainer getOverallMarkings() {
    return this.overallMarkings;
  }

  public ProtectedDocument setOverallMarkings(SecurityContainer overallMarkings) {
    this.overallMarkings = overallMarkings;
    return this;
  }

  public void unsetOverallMarkings() {
    this.overallMarkings = null;
  }

  /** Returns true if field overallMarkings is set (has been assigned a value) and false otherwise */
  public boolean isSetOverallMarkings() {
    return this.overallMarkings != null;
  }

  public void setOverallMarkingsIsSet(boolean value) {
    if (!value) {
      this.overallMarkings = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELDS:
      if (value == null) {
        unsetFields();
      } else {
        setFields((Map<ProtectedKey,ProtectedField>)value);
      }
      break;

    case OVERALL_MARKINGS:
      if (value == null) {
        unsetOverallMarkings();
      } else {
        setOverallMarkings((SecurityContainer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELDS:
      return getFields();

    case OVERALL_MARKINGS:
      return getOverallMarkings();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELDS:
      return isSetFields();
    case OVERALL_MARKINGS:
      return isSetOverallMarkings();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProtectedDocument)
      return this.equals((ProtectedDocument)that);
    return false;
  }

  public boolean equals(ProtectedDocument that) {
    if (that == null)
      return false;

    boolean this_present_fields = true && this.isSetFields();
    boolean that_present_fields = true && that.isSetFields();
    if (this_present_fields || that_present_fields) {
      if (!(this_present_fields && that_present_fields))
        return false;
      if (!this.fields.equals(that.fields))
        return false;
    }

    boolean this_present_overallMarkings = true && this.isSetOverallMarkings();
    boolean that_present_overallMarkings = true && that.isSetOverallMarkings();
    if (this_present_overallMarkings || that_present_overallMarkings) {
      if (!(this_present_overallMarkings && that_present_overallMarkings))
        return false;
      if (!this.overallMarkings.equals(that.overallMarkings))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fields = true && (isSetFields());
    list.add(present_fields);
    if (present_fields)
      list.add(fields);

    boolean present_overallMarkings = true && (isSetOverallMarkings());
    list.add(present_overallMarkings);
    if (present_overallMarkings)
      list.add(overallMarkings);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProtectedDocument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFields()).compareTo(other.isSetFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverallMarkings()).compareTo(other.isSetOverallMarkings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverallMarkings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overallMarkings, other.overallMarkings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProtectedDocument(");
    boolean first = true;

    sb.append("fields:");
    if (this.fields == null) {
      sb.append("null");
    } else {
      sb.append(this.fields);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overallMarkings:");
    if (this.overallMarkings == null) {
      sb.append("null");
    } else {
      sb.append(this.overallMarkings);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (overallMarkings != null) {
      overallMarkings.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProtectedDocumentStandardSchemeFactory implements SchemeFactory {
    public ProtectedDocumentStandardScheme getScheme() {
      return new ProtectedDocumentStandardScheme();
    }
  }

  private static class ProtectedDocumentStandardScheme extends StandardScheme<ProtectedDocument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProtectedDocument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                struct.fields = new HashMap<ProtectedKey,ProtectedField>(2*_map24.size);
                ProtectedKey _key25;
                ProtectedField _val26;
                for (int _i27 = 0; _i27 < _map24.size; ++_i27)
                {
                  _key25 = new ProtectedKey();
                  _key25.read(iprot);
                  _val26 = new ProtectedField();
                  _val26.read(iprot);
                  struct.fields.put(_key25, _val26);
                }
                iprot.readMapEnd();
              }
              struct.setFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OVERALL_MARKINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.overallMarkings = new SecurityContainer();
              struct.overallMarkings.read(iprot);
              struct.setOverallMarkingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProtectedDocument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fields != null) {
        oprot.writeFieldBegin(FIELDS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, struct.fields.size()));
          for (Map.Entry<ProtectedKey, ProtectedField> _iter28 : struct.fields.entrySet())
          {
            _iter28.getKey().write(oprot);
            _iter28.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.overallMarkings != null) {
        oprot.writeFieldBegin(OVERALL_MARKINGS_FIELD_DESC);
        struct.overallMarkings.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProtectedDocumentTupleSchemeFactory implements SchemeFactory {
    public ProtectedDocumentTupleScheme getScheme() {
      return new ProtectedDocumentTupleScheme();
    }
  }

  private static class ProtectedDocumentTupleScheme extends TupleScheme<ProtectedDocument> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProtectedDocument struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFields()) {
        optionals.set(0);
      }
      if (struct.isSetOverallMarkings()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFields()) {
        {
          oprot.writeI32(struct.fields.size());
          for (Map.Entry<ProtectedKey, ProtectedField> _iter29 : struct.fields.entrySet())
          {
            _iter29.getKey().write(oprot);
            _iter29.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetOverallMarkings()) {
        struct.overallMarkings.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProtectedDocument struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fields = new HashMap<ProtectedKey,ProtectedField>(2*_map30.size);
          ProtectedKey _key31;
          ProtectedField _val32;
          for (int _i33 = 0; _i33 < _map30.size; ++_i33)
          {
            _key31 = new ProtectedKey();
            _key31.read(iprot);
            _val32 = new ProtectedField();
            _val32.read(iprot);
            struct.fields.put(_key31, _val32);
          }
        }
        struct.setFieldsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.overallMarkings = new SecurityContainer();
        struct.overallMarkings.read(iprot);
        struct.setOverallMarkingsIsSet(true);
      }
    }
  }

}

