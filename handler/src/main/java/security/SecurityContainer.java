/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package security;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Represents the known security parameters that can be associated with a document.
 * Use of the empty set is encouraged over the use of NULL values.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-13")
public class SecurityContainer implements org.apache.thrift.TBase<SecurityContainer, SecurityContainer._Fields>, java.io.Serializable, Cloneable, Comparable<SecurityContainer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SecurityContainer");

  private static final org.apache.thrift.protocol.TField LEVELS_FIELD_DESC = new org.apache.thrift.protocol.TField("levels", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("groups", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField COMPARTMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("compartments", org.apache.thrift.protocol.TType.SET, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SecurityContainerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SecurityContainerTupleSchemeFactory());
  }

  public Set<Level> levels; // required
  public Set<Group> groups; // required
  public Set<Compartment> compartments; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEVELS((short)1, "levels"),
    GROUPS((short)2, "groups"),
    COMPARTMENTS((short)3, "compartments");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEVELS
          return LEVELS;
        case 2: // GROUPS
          return GROUPS;
        case 3: // COMPARTMENTS
          return COMPARTMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEVELS, new org.apache.thrift.meta_data.FieldMetaData("levels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Level.class))));
    tmpMap.put(_Fields.GROUPS, new org.apache.thrift.meta_data.FieldMetaData("groups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Group.class))));
    tmpMap.put(_Fields.COMPARTMENTS, new org.apache.thrift.meta_data.FieldMetaData("compartments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Compartment.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SecurityContainer.class, metaDataMap);
  }

  public SecurityContainer() {
  }

  public SecurityContainer(
    Set<Level> levels,
    Set<Group> groups,
    Set<Compartment> compartments)
  {
    this();
    this.levels = levels;
    this.groups = groups;
    this.compartments = compartments;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SecurityContainer(SecurityContainer other) {
    if (other.isSetLevels()) {
      Set<Level> __this__levels = new HashSet<Level>(other.levels.size());
      for (Level other_element : other.levels) {
        __this__levels.add(other_element);
      }
      this.levels = __this__levels;
    }
    if (other.isSetGroups()) {
      Set<Group> __this__groups = new HashSet<Group>(other.groups.size());
      for (Group other_element : other.groups) {
        __this__groups.add(other_element);
      }
      this.groups = __this__groups;
    }
    if (other.isSetCompartments()) {
      Set<Compartment> __this__compartments = new HashSet<Compartment>(other.compartments.size());
      for (Compartment other_element : other.compartments) {
        __this__compartments.add(other_element);
      }
      this.compartments = __this__compartments;
    }
  }

  public SecurityContainer deepCopy() {
    return new SecurityContainer(this);
  }

  @Override
  public void clear() {
    this.levels = null;
    this.groups = null;
    this.compartments = null;
  }

  public int getLevelsSize() {
    return (this.levels == null) ? 0 : this.levels.size();
  }

  public java.util.Iterator<Level> getLevelsIterator() {
    return (this.levels == null) ? null : this.levels.iterator();
  }

  public void addToLevels(Level elem) {
    if (this.levels == null) {
      this.levels = new HashSet<Level>();
    }
    this.levels.add(elem);
  }

  public Set<Level> getLevels() {
    return this.levels;
  }

  public SecurityContainer setLevels(Set<Level> levels) {
    this.levels = levels;
    return this;
  }

  public void unsetLevels() {
    this.levels = null;
  }

  /** Returns true if field levels is set (has been assigned a value) and false otherwise */
  public boolean isSetLevels() {
    return this.levels != null;
  }

  public void setLevelsIsSet(boolean value) {
    if (!value) {
      this.levels = null;
    }
  }

  public int getGroupsSize() {
    return (this.groups == null) ? 0 : this.groups.size();
  }

  public java.util.Iterator<Group> getGroupsIterator() {
    return (this.groups == null) ? null : this.groups.iterator();
  }

  public void addToGroups(Group elem) {
    if (this.groups == null) {
      this.groups = new HashSet<Group>();
    }
    this.groups.add(elem);
  }

  public Set<Group> getGroups() {
    return this.groups;
  }

  public SecurityContainer setGroups(Set<Group> groups) {
    this.groups = groups;
    return this;
  }

  public void unsetGroups() {
    this.groups = null;
  }

  /** Returns true if field groups is set (has been assigned a value) and false otherwise */
  public boolean isSetGroups() {
    return this.groups != null;
  }

  public void setGroupsIsSet(boolean value) {
    if (!value) {
      this.groups = null;
    }
  }

  public int getCompartmentsSize() {
    return (this.compartments == null) ? 0 : this.compartments.size();
  }

  public java.util.Iterator<Compartment> getCompartmentsIterator() {
    return (this.compartments == null) ? null : this.compartments.iterator();
  }

  public void addToCompartments(Compartment elem) {
    if (this.compartments == null) {
      this.compartments = new HashSet<Compartment>();
    }
    this.compartments.add(elem);
  }

  public Set<Compartment> getCompartments() {
    return this.compartments;
  }

  public SecurityContainer setCompartments(Set<Compartment> compartments) {
    this.compartments = compartments;
    return this;
  }

  public void unsetCompartments() {
    this.compartments = null;
  }

  /** Returns true if field compartments is set (has been assigned a value) and false otherwise */
  public boolean isSetCompartments() {
    return this.compartments != null;
  }

  public void setCompartmentsIsSet(boolean value) {
    if (!value) {
      this.compartments = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LEVELS:
      if (value == null) {
        unsetLevels();
      } else {
        setLevels((Set<Level>)value);
      }
      break;

    case GROUPS:
      if (value == null) {
        unsetGroups();
      } else {
        setGroups((Set<Group>)value);
      }
      break;

    case COMPARTMENTS:
      if (value == null) {
        unsetCompartments();
      } else {
        setCompartments((Set<Compartment>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LEVELS:
      return getLevels();

    case GROUPS:
      return getGroups();

    case COMPARTMENTS:
      return getCompartments();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LEVELS:
      return isSetLevels();
    case GROUPS:
      return isSetGroups();
    case COMPARTMENTS:
      return isSetCompartments();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SecurityContainer)
      return this.equals((SecurityContainer)that);
    return false;
  }

  public boolean equals(SecurityContainer that) {
    if (that == null)
      return false;

    boolean this_present_levels = true && this.isSetLevels();
    boolean that_present_levels = true && that.isSetLevels();
    if (this_present_levels || that_present_levels) {
      if (!(this_present_levels && that_present_levels))
        return false;
      if (!this.levels.equals(that.levels))
        return false;
    }

    boolean this_present_groups = true && this.isSetGroups();
    boolean that_present_groups = true && that.isSetGroups();
    if (this_present_groups || that_present_groups) {
      if (!(this_present_groups && that_present_groups))
        return false;
      if (!this.groups.equals(that.groups))
        return false;
    }

    boolean this_present_compartments = true && this.isSetCompartments();
    boolean that_present_compartments = true && that.isSetCompartments();
    if (this_present_compartments || that_present_compartments) {
      if (!(this_present_compartments && that_present_compartments))
        return false;
      if (!this.compartments.equals(that.compartments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_levels = true && (isSetLevels());
    list.add(present_levels);
    if (present_levels)
      list.add(levels);

    boolean present_groups = true && (isSetGroups());
    list.add(present_groups);
    if (present_groups)
      list.add(groups);

    boolean present_compartments = true && (isSetCompartments());
    list.add(present_compartments);
    if (present_compartments)
      list.add(compartments);

    return list.hashCode();
  }

  @Override
  public int compareTo(SecurityContainer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLevels()).compareTo(other.isSetLevels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levels, other.levels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroups()).compareTo(other.isSetGroups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groups, other.groups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompartments()).compareTo(other.isSetCompartments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompartments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compartments, other.compartments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SecurityContainer(");
    boolean first = true;

    sb.append("levels:");
    if (this.levels == null) {
      sb.append("null");
    } else {
      sb.append(this.levels);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groups:");
    if (this.groups == null) {
      sb.append("null");
    } else {
      sb.append(this.groups);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compartments:");
    if (this.compartments == null) {
      sb.append("null");
    } else {
      sb.append(this.compartments);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SecurityContainerStandardSchemeFactory implements SchemeFactory {
    public SecurityContainerStandardScheme getScheme() {
      return new SecurityContainerStandardScheme();
    }
  }

  private static class SecurityContainerStandardScheme extends StandardScheme<SecurityContainer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SecurityContainer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEVELS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.levels = new HashSet<Level>(2*_set0.size);
                Level _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = security.Level.findByValue(iprot.readI32());
                  struct.levels.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setLevelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.groups = new HashSet<Group>(2*_set3.size);
                Group _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = security.Group.findByValue(iprot.readI32());
                  struct.groups.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setGroupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPARTMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.compartments = new HashSet<Compartment>(2*_set6.size);
                Compartment _elem7;
                for (int _i8 = 0; _i8 < _set6.size; ++_i8)
                {
                  _elem7 = security.Compartment.findByValue(iprot.readI32());
                  struct.compartments.add(_elem7);
                }
                iprot.readSetEnd();
              }
              struct.setCompartmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SecurityContainer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.levels != null) {
        oprot.writeFieldBegin(LEVELS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.levels.size()));
          for (Level _iter9 : struct.levels)
          {
            oprot.writeI32(_iter9.getValue());
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.groups != null) {
        oprot.writeFieldBegin(GROUPS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.groups.size()));
          for (Group _iter10 : struct.groups)
          {
            oprot.writeI32(_iter10.getValue());
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.compartments != null) {
        oprot.writeFieldBegin(COMPARTMENTS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.compartments.size()));
          for (Compartment _iter11 : struct.compartments)
          {
            oprot.writeI32(_iter11.getValue());
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SecurityContainerTupleSchemeFactory implements SchemeFactory {
    public SecurityContainerTupleScheme getScheme() {
      return new SecurityContainerTupleScheme();
    }
  }

  private static class SecurityContainerTupleScheme extends TupleScheme<SecurityContainer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SecurityContainer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLevels()) {
        optionals.set(0);
      }
      if (struct.isSetGroups()) {
        optionals.set(1);
      }
      if (struct.isSetCompartments()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLevels()) {
        {
          oprot.writeI32(struct.levels.size());
          for (Level _iter12 : struct.levels)
          {
            oprot.writeI32(_iter12.getValue());
          }
        }
      }
      if (struct.isSetGroups()) {
        {
          oprot.writeI32(struct.groups.size());
          for (Group _iter13 : struct.groups)
          {
            oprot.writeI32(_iter13.getValue());
          }
        }
      }
      if (struct.isSetCompartments()) {
        {
          oprot.writeI32(struct.compartments.size());
          for (Compartment _iter14 : struct.compartments)
          {
            oprot.writeI32(_iter14.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SecurityContainer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set15 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.levels = new HashSet<Level>(2*_set15.size);
          Level _elem16;
          for (int _i17 = 0; _i17 < _set15.size; ++_i17)
          {
            _elem16 = security.Level.findByValue(iprot.readI32());
            struct.levels.add(_elem16);
          }
        }
        struct.setLevelsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set18 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.groups = new HashSet<Group>(2*_set18.size);
          Group _elem19;
          for (int _i20 = 0; _i20 < _set18.size; ++_i20)
          {
            _elem19 = security.Group.findByValue(iprot.readI32());
            struct.groups.add(_elem19);
          }
        }
        struct.setGroupsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set21 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.compartments = new HashSet<Compartment>(2*_set21.size);
          Compartment _elem22;
          for (int _i23 = 0; _i23 < _set21.size; ++_i23)
          {
            _elem22 = security.Compartment.findByValue(iprot.readI32());
            struct.compartments.add(_elem22);
          }
        }
        struct.setCompartmentsIsSet(true);
      }
    }
  }

}

